// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: salto/nebula/device/v1/encoder.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Saltoapis.Nebula.Device.V1 {
  /// <summary>
  /// A card encoder is an external device that reads and updates card keys with
  /// access information. This service is responsible for managing encoder
  /// resources.
  /// </summary>
  public static partial class EncoderService
  {
    static readonly string __ServiceName = "salto.nebula.device.v1.EncoderService";

    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Device.V1.CreateEncoderRequest> __Marshaller_salto_nebula_device_v1_CreateEncoderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Device.V1.CreateEncoderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Device.V1.Encoder> __Marshaller_salto_nebula_device_v1_Encoder = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Device.V1.Encoder.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Device.V1.DeleteEncoderRequest> __Marshaller_salto_nebula_device_v1_DeleteEncoderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Device.V1.DeleteEncoderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Device.V1.GetEncoderRequest> __Marshaller_salto_nebula_device_v1_GetEncoderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Device.V1.GetEncoderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Device.V1.ListEncodersRequest> __Marshaller_salto_nebula_device_v1_ListEncodersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Device.V1.ListEncodersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Device.V1.ListEncodersResponse> __Marshaller_salto_nebula_device_v1_ListEncodersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Device.V1.ListEncodersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Device.V1.UpdateEncoderRequest> __Marshaller_salto_nebula_device_v1_UpdateEncoderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Device.V1.UpdateEncoderRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Saltoapis.Nebula.Device.V1.CreateEncoderRequest, global::Saltoapis.Nebula.Device.V1.Encoder> __Method_CreateEncoder = new grpc::Method<global::Saltoapis.Nebula.Device.V1.CreateEncoderRequest, global::Saltoapis.Nebula.Device.V1.Encoder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEncoder",
        __Marshaller_salto_nebula_device_v1_CreateEncoderRequest,
        __Marshaller_salto_nebula_device_v1_Encoder);

    static readonly grpc::Method<global::Saltoapis.Nebula.Device.V1.DeleteEncoderRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteEncoder = new grpc::Method<global::Saltoapis.Nebula.Device.V1.DeleteEncoderRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEncoder",
        __Marshaller_salto_nebula_device_v1_DeleteEncoderRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Saltoapis.Nebula.Device.V1.GetEncoderRequest, global::Saltoapis.Nebula.Device.V1.Encoder> __Method_GetEncoder = new grpc::Method<global::Saltoapis.Nebula.Device.V1.GetEncoderRequest, global::Saltoapis.Nebula.Device.V1.Encoder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEncoder",
        __Marshaller_salto_nebula_device_v1_GetEncoderRequest,
        __Marshaller_salto_nebula_device_v1_Encoder);

    static readonly grpc::Method<global::Saltoapis.Nebula.Device.V1.ListEncodersRequest, global::Saltoapis.Nebula.Device.V1.ListEncodersResponse> __Method_ListEncoders = new grpc::Method<global::Saltoapis.Nebula.Device.V1.ListEncodersRequest, global::Saltoapis.Nebula.Device.V1.ListEncodersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListEncoders",
        __Marshaller_salto_nebula_device_v1_ListEncodersRequest,
        __Marshaller_salto_nebula_device_v1_ListEncodersResponse);

    static readonly grpc::Method<global::Saltoapis.Nebula.Device.V1.UpdateEncoderRequest, global::Saltoapis.Nebula.Device.V1.Encoder> __Method_UpdateEncoder = new grpc::Method<global::Saltoapis.Nebula.Device.V1.UpdateEncoderRequest, global::Saltoapis.Nebula.Device.V1.Encoder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEncoder",
        __Marshaller_salto_nebula_device_v1_UpdateEncoderRequest,
        __Marshaller_salto_nebula_device_v1_Encoder);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Saltoapis.Nebula.Device.V1.EncoderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for EncoderService</summary>
    public partial class EncoderServiceClient : grpc::ClientBase<EncoderServiceClient>
    {
      /// <summary>Creates a new client for EncoderService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EncoderServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EncoderService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EncoderServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EncoderServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EncoderServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an encoder
      ///
      /// Creates a new encoder
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Device.V1.Encoder CreateEncoder(global::Saltoapis.Nebula.Device.V1.CreateEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an encoder
      ///
      /// Creates a new encoder
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Device.V1.Encoder CreateEncoder(global::Saltoapis.Nebula.Device.V1.CreateEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEncoder, null, options, request);
      }
      /// <summary>
      /// Create an encoder
      ///
      /// Creates a new encoder
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Device.V1.Encoder> CreateEncoderAsync(global::Saltoapis.Nebula.Device.V1.CreateEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an encoder
      ///
      /// Creates a new encoder
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Device.V1.Encoder> CreateEncoderAsync(global::Saltoapis.Nebula.Device.V1.CreateEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEncoder, null, options, request);
      }
      /// <summary>
      /// Delete an encoder
      ///
      /// Permanently deletes an encoder. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteEncoder(global::Saltoapis.Nebula.Device.V1.DeleteEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an encoder
      ///
      /// Permanently deletes an encoder. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteEncoder(global::Saltoapis.Nebula.Device.V1.DeleteEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEncoder, null, options, request);
      }
      /// <summary>
      /// Delete an encoder
      ///
      /// Permanently deletes an encoder. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteEncoderAsync(global::Saltoapis.Nebula.Device.V1.DeleteEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an encoder
      ///
      /// Permanently deletes an encoder. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteEncoderAsync(global::Saltoapis.Nebula.Device.V1.DeleteEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEncoder, null, options, request);
      }
      /// <summary>
      /// Get an encoder
      ///
      /// Gets an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Device.V1.Encoder GetEncoder(global::Saltoapis.Nebula.Device.V1.GetEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an encoder
      ///
      /// Gets an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Device.V1.Encoder GetEncoder(global::Saltoapis.Nebula.Device.V1.GetEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEncoder, null, options, request);
      }
      /// <summary>
      /// Get an encoder
      ///
      /// Gets an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Device.V1.Encoder> GetEncoderAsync(global::Saltoapis.Nebula.Device.V1.GetEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an encoder
      ///
      /// Gets an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Device.V1.Encoder> GetEncoderAsync(global::Saltoapis.Nebula.Device.V1.GetEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEncoder, null, options, request);
      }
      /// <summary>
      /// List encoders
      ///
      /// Returns a list of encoders that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Device.V1.ListEncodersResponse ListEncoders(global::Saltoapis.Nebula.Device.V1.ListEncodersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEncoders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List encoders
      ///
      /// Returns a list of encoders that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Device.V1.ListEncodersResponse ListEncoders(global::Saltoapis.Nebula.Device.V1.ListEncodersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListEncoders, null, options, request);
      }
      /// <summary>
      /// List encoders
      ///
      /// Returns a list of encoders that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Device.V1.ListEncodersResponse> ListEncodersAsync(global::Saltoapis.Nebula.Device.V1.ListEncodersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEncodersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List encoders
      ///
      /// Returns a list of encoders that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Device.V1.ListEncodersResponse> ListEncodersAsync(global::Saltoapis.Nebula.Device.V1.ListEncodersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListEncoders, null, options, request);
      }
      /// <summary>
      /// Update an encoder
      ///
      /// Updates an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Device.V1.Encoder UpdateEncoder(global::Saltoapis.Nebula.Device.V1.UpdateEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an encoder
      ///
      /// Updates an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Device.V1.Encoder UpdateEncoder(global::Saltoapis.Nebula.Device.V1.UpdateEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEncoder, null, options, request);
      }
      /// <summary>
      /// Update an encoder
      ///
      /// Updates an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Device.V1.Encoder> UpdateEncoderAsync(global::Saltoapis.Nebula.Device.V1.UpdateEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an encoder
      ///
      /// Updates an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Device.V1.Encoder> UpdateEncoderAsync(global::Saltoapis.Nebula.Device.V1.UpdateEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEncoder, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EncoderServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EncoderServiceClient(configuration);
      }
    }

  }
}
#endregion
