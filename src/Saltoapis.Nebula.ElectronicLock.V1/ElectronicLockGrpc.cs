// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: salto/nebula/electroniclock/v1/electronic_lock.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Saltoapis.Nebula.ElectronicLock.V1 {
  /// <summary>
  /// An electronic lock is a physical electronic device such as an electronic
  /// escutcheon or cylinder, or a door controller with an electric strike. It
  /// differs from an access point in that, an electronic lock could be a
  /// particular model of a device such as a SALTO Neo cylinder, a door controller
  /// with an electric strike or a Danalock V3 smartlock, for example. An
  /// electronic lock is a single device whereas an access point could be made up
  /// of several devices. An access point could be composed of an electronic lock
  /// plus a door detector, a door controller and a keypad, or an intercom adaptor
  /// which is connected to multiple electronic locks. This service is responsible
  /// for managing electronic lock resources.
  /// </summary>
  public static partial class ElectronicLockService
  {
    static readonly string __ServiceName = "salto.nebula.electroniclock.v1.ElectronicLockService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.CreateElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_CreateElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.CreateElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> __Marshaller_salto_nebula_electroniclock_v1_ElectronicLock = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.GetElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_GetElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.GetElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksRequest> __Marshaller_salto_nebula_electroniclock_v1_ListElectronicLocksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksResponse> __Marshaller_salto_nebula_electroniclock_v1_ListElectronicLocksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_UpdateElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.DeleteElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_DeleteElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.DeleteElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_BindElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockResponse> __Marshaller_salto_nebula_electroniclock_v1_BindElectronicLockResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_UnbindElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockResponse> __Marshaller_salto_nebula_electroniclock_v1_UnbindElectronicLockResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.InitializeElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_InitializeElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.InitializeElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Longrunning.V1.Operation> __Marshaller_salto_longrunning_v1_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Longrunning.V1.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.ConfigureElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_ConfigureElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.ConfigureElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.ResetElectronicLockRequest> __Marshaller_salto_nebula_electroniclock_v1_ResetElectronicLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.ResetElectronicLockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockFirmwareRequest> __Marshaller_salto_nebula_electroniclock_v1_UpdateElectronicLockFirmwareRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockFirmwareRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.CreateElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> __Method_CreateElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.CreateElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_CreateElectronicLockRequest,
        __Marshaller_salto_nebula_electroniclock_v1_ElectronicLock);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.GetElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> __Method_GetElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.GetElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_GetElectronicLockRequest,
        __Marshaller_salto_nebula_electroniclock_v1_ElectronicLock);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksRequest, global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksResponse> __Method_ListElectronicLocks = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksRequest, global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListElectronicLocks",
        __Marshaller_salto_nebula_electroniclock_v1_ListElectronicLocksRequest,
        __Marshaller_salto_nebula_electroniclock_v1_ListElectronicLocksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> __Method_UpdateElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_UpdateElectronicLockRequest,
        __Marshaller_salto_nebula_electroniclock_v1_ElectronicLock);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.DeleteElectronicLockRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.DeleteElectronicLockRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_DeleteElectronicLockRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockResponse> __Method_BindElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BindElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_BindElectronicLockRequest,
        __Marshaller_salto_nebula_electroniclock_v1_BindElectronicLockResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockResponse> __Method_UnbindElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockRequest, global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnbindElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_UnbindElectronicLockRequest,
        __Marshaller_salto_nebula_electroniclock_v1_UnbindElectronicLockResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.InitializeElectronicLockRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_InitializeElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.InitializeElectronicLockRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_InitializeElectronicLockRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.ConfigureElectronicLockRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_ConfigureElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.ConfigureElectronicLockRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigureElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_ConfigureElectronicLockRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.ResetElectronicLockRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_ResetElectronicLock = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.ResetElectronicLockRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetElectronicLock",
        __Marshaller_salto_nebula_electroniclock_v1_ResetElectronicLockRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockFirmwareRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_UpdateElectronicLockFirmware = new grpc::Method<global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockFirmwareRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateElectronicLockFirmware",
        __Marshaller_salto_nebula_electroniclock_v1_UpdateElectronicLockFirmwareRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLockReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ElectronicLockService</summary>
    public partial class ElectronicLockServiceClient : grpc::ClientBase<ElectronicLockServiceClient>
    {
      /// <summary>Creates a new client for ElectronicLockService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ElectronicLockServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ElectronicLockService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ElectronicLockServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ElectronicLockServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ElectronicLockServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an electronic lock
      ///
      /// Creates a new electronic lock
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock CreateElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.CreateElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an electronic lock
      ///
      /// Creates a new electronic lock
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock CreateElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.CreateElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateElectronicLock, null, options, request);
      }
      /// <summary>
      /// Create an electronic lock
      ///
      /// Creates a new electronic lock
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> CreateElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.CreateElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an electronic lock
      ///
      /// Creates a new electronic lock
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> CreateElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.CreateElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateElectronicLock, null, options, request);
      }
      /// <summary>
      /// Get an electronic lock
      ///
      /// Gets an existing electronic lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock GetElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.GetElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an electronic lock
      ///
      /// Gets an existing electronic lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock GetElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.GetElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetElectronicLock, null, options, request);
      }
      /// <summary>
      /// Get an electronic lock
      ///
      /// Gets an existing electronic lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> GetElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.GetElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an electronic lock
      ///
      /// Gets an existing electronic lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> GetElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.GetElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetElectronicLock, null, options, request);
      }
      /// <summary>
      /// List electronic locks
      ///
      /// Returns a list of electronic locks that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksResponse ListElectronicLocks(global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListElectronicLocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List electronic locks
      ///
      /// Returns a list of electronic locks that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksResponse ListElectronicLocks(global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListElectronicLocks, null, options, request);
      }
      /// <summary>
      /// List electronic locks
      ///
      /// Returns a list of electronic locks that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksResponse> ListElectronicLocksAsync(global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListElectronicLocksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List electronic locks
      ///
      /// Returns a list of electronic locks that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksResponse> ListElectronicLocksAsync(global::Saltoapis.Nebula.ElectronicLock.V1.ListElectronicLocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListElectronicLocks, null, options, request);
      }
      /// <summary>
      /// Update an electronic lock
      ///
      /// Updates an existing electronic lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock UpdateElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an electronic lock
      ///
      /// Updates an existing electronic lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock UpdateElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateElectronicLock, null, options, request);
      }
      /// <summary>
      /// Update an electronic lock
      ///
      /// Updates an existing electronic lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> UpdateElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an electronic lock
      ///
      /// Updates an existing electronic lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.ElectronicLock> UpdateElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateElectronicLock, null, options, request);
      }
      /// <summary>
      /// Delete an electronic lock
      ///
      /// Permanently deletes an electronic lock. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.DeleteElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an electronic lock
      ///
      /// Permanently deletes an electronic lock. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.DeleteElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteElectronicLock, null, options, request);
      }
      /// <summary>
      /// Delete an electronic lock
      ///
      /// Permanently deletes an electronic lock. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.DeleteElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an electronic lock
      ///
      /// Permanently deletes an electronic lock. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.DeleteElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteElectronicLock, null, options, request);
      }
      /// <summary>
      /// Bind an electronic lock
      ///
      /// Binds an electronic lock. Binding an electronic lock assigns a device
      /// identifier to the electronic lock. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockResponse BindElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BindElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bind an electronic lock
      ///
      /// Binds an electronic lock. Binding an electronic lock assigns a device
      /// identifier to the electronic lock. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockResponse BindElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BindElectronicLock, null, options, request);
      }
      /// <summary>
      /// Bind an electronic lock
      ///
      /// Binds an electronic lock. Binding an electronic lock assigns a device
      /// identifier to the electronic lock. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockResponse> BindElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BindElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bind an electronic lock
      ///
      /// Binds an electronic lock. Binding an electronic lock assigns a device
      /// identifier to the electronic lock. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockResponse> BindElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.BindElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BindElectronicLock, null, options, request);
      }
      /// <summary>
      /// Unbind an electronic lock
      ///
      /// Unbinds an electronic lock. Unbinding an electronic lock removes the
      /// device identifier from the electronic lock. This may be required in some
      /// cases where the electronic lock is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockResponse UnbindElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnbindElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unbind an electronic lock
      ///
      /// Unbinds an electronic lock. Unbinding an electronic lock removes the
      /// device identifier from the electronic lock. This may be required in some
      /// cases where the electronic lock is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockResponse UnbindElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnbindElectronicLock, null, options, request);
      }
      /// <summary>
      /// Unbind an electronic lock
      ///
      /// Unbinds an electronic lock. Unbinding an electronic lock removes the
      /// device identifier from the electronic lock. This may be required in some
      /// cases where the electronic lock is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockResponse> UnbindElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnbindElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unbind an electronic lock
      ///
      /// Unbinds an electronic lock. Unbinding an electronic lock removes the
      /// device identifier from the electronic lock. This may be required in some
      /// cases where the electronic lock is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockResponse> UnbindElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.UnbindElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnbindElectronicLock, null, options, request);
      }
      /// <summary>
      /// Initialize an electronic lock
      ///
      /// Initializes an electronic lock. Electronic locks need to be initialized
      /// before you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation InitializeElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.InitializeElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initialize an electronic lock
      ///
      /// Initializes an electronic lock. Electronic locks need to be initialized
      /// before you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation InitializeElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.InitializeElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeElectronicLock, null, options, request);
      }
      /// <summary>
      /// Initialize an electronic lock
      ///
      /// Initializes an electronic lock. Electronic locks need to be initialized
      /// before you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> InitializeElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.InitializeElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initialize an electronic lock
      ///
      /// Initializes an electronic lock. Electronic locks need to be initialized
      /// before you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> InitializeElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.InitializeElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeElectronicLock, null, options, request);
      }
      /// <summary>
      /// Configure an electronic lock
      ///
      /// Configures an electronic lock. Configuring an electronic lock implies
      /// adding some information to the electronic lock such as setting the time
      /// zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ConfigureElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.ConfigureElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configure an electronic lock
      ///
      /// Configures an electronic lock. Configuring an electronic lock implies
      /// adding some information to the electronic lock such as setting the time
      /// zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ConfigureElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.ConfigureElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigureElectronicLock, null, options, request);
      }
      /// <summary>
      /// Configure an electronic lock
      ///
      /// Configures an electronic lock. Configuring an electronic lock implies
      /// adding some information to the electronic lock such as setting the time
      /// zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ConfigureElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.ConfigureElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configure an electronic lock
      ///
      /// Configures an electronic lock. Configuring an electronic lock implies
      /// adding some information to the electronic lock such as setting the time
      /// zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ConfigureElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.ConfigureElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigureElectronicLock, null, options, request);
      }
      /// <summary>
      /// Reset an electronic lock
      ///
      /// Resetting a device such as an electronic lock means returning it to its
      /// factory settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ResetElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.ResetElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetElectronicLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reset an electronic lock
      ///
      /// Resetting a device such as an electronic lock means returning it to its
      /// factory settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ResetElectronicLock(global::Saltoapis.Nebula.ElectronicLock.V1.ResetElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetElectronicLock, null, options, request);
      }
      /// <summary>
      /// Reset an electronic lock
      ///
      /// Resetting a device such as an electronic lock means returning it to its
      /// factory settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ResetElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.ResetElectronicLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetElectronicLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reset an electronic lock
      ///
      /// Resetting a device such as an electronic lock means returning it to its
      /// factory settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ResetElectronicLockAsync(global::Saltoapis.Nebula.ElectronicLock.V1.ResetElectronicLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetElectronicLock, null, options, request);
      }
      /// <summary>
      /// Update electronic lock firmware
      ///
      /// Updates an electronic lock's firmware. SALTO provides firmware updates
      /// when new functionality is available or when we fix a bug.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation UpdateElectronicLockFirmware(global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockFirmwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateElectronicLockFirmware(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update electronic lock firmware
      ///
      /// Updates an electronic lock's firmware. SALTO provides firmware updates
      /// when new functionality is available or when we fix a bug.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation UpdateElectronicLockFirmware(global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockFirmwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateElectronicLockFirmware, null, options, request);
      }
      /// <summary>
      /// Update electronic lock firmware
      ///
      /// Updates an electronic lock's firmware. SALTO provides firmware updates
      /// when new functionality is available or when we fix a bug.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> UpdateElectronicLockFirmwareAsync(global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockFirmwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateElectronicLockFirmwareAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update electronic lock firmware
      ///
      /// Updates an electronic lock's firmware. SALTO provides firmware updates
      /// when new functionality is available or when we fix a bug.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> UpdateElectronicLockFirmwareAsync(global::Saltoapis.Nebula.ElectronicLock.V1.UpdateElectronicLockFirmwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateElectronicLockFirmware, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ElectronicLockServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ElectronicLockServiceClient(configuration);
      }
    }

  }
}
#endregion
