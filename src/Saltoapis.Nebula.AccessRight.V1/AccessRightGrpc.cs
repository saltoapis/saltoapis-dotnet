// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: salto/nebula/accessright/v1/access_right.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Saltoapis.Nebula.AccessRight.V1 {
  /// <summary>
  /// Access rights simplify the management of access permissions for large
  /// sets of users with similar access profiles. An access right can contain
  /// multiple access points. Access rights determine who can enter where, and
  /// when. This service is responsible for managing access right resources as well
  /// as their association with access points.
  /// </summary>
  public static partial class AccessRightService
  {
    static readonly string __ServiceName = "salto.nebula.accessright.v1.AccessRightService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightRequest> __Marshaller_salto_nebula_accessright_v1_CreateAccessRightRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.AccessRight> __Marshaller_salto_nebula_accessright_v1_AccessRight = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.AccessRight.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightRequest> __Marshaller_salto_nebula_accessright_v1_GetAccessRightRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsRequest> __Marshaller_salto_nebula_accessright_v1_ListAccessRightsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsResponse> __Marshaller_salto_nebula_accessright_v1_ListAccessRightsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightRequest> __Marshaller_salto_nebula_accessright_v1_UpdateAccessRightRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightRequest> __Marshaller_salto_nebula_accessright_v1_DeleteAccessRightRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointRequest> __Marshaller_salto_nebula_accessright_v1_CreateAccessRightAccessPointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> __Marshaller_salto_nebula_accessright_v1_AccessRightAccessPoint = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsRequest> __Marshaller_salto_nebula_accessright_v1_BatchCreateAccessRightAccessPointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsResponse> __Marshaller_salto_nebula_accessright_v1_BatchCreateAccessRightAccessPointsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointRequest> __Marshaller_salto_nebula_accessright_v1_GetAccessRightAccessPointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsRequest> __Marshaller_salto_nebula_accessright_v1_ListAccessRightAccessPointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsResponse> __Marshaller_salto_nebula_accessright_v1_ListAccessRightAccessPointsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointRequest> __Marshaller_salto_nebula_accessright_v1_UpdateAccessRightAccessPointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointRequest> __Marshaller_salto_nebula_accessright_v1_DeleteAccessRightAccessPointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsRequest> __Marshaller_salto_nebula_accessright_v1_BatchDeleteAccessRightAccessPointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsResponse> __Marshaller_salto_nebula_accessright_v1_BatchDeleteAccessRightAccessPointsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointGroupRequest> __Marshaller_salto_nebula_accessright_v1_CreateAccessRightAccessPointGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> __Marshaller_salto_nebula_accessright_v1_AccessRightAccessPointGroup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsRequest> __Marshaller_salto_nebula_accessright_v1_BatchCreateAccessRightAccessPointGroupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsResponse> __Marshaller_salto_nebula_accessright_v1_BatchCreateAccessRightAccessPointGroupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointGroupRequest> __Marshaller_salto_nebula_accessright_v1_GetAccessRightAccessPointGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsRequest> __Marshaller_salto_nebula_accessright_v1_ListAccessRightAccessPointGroupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsResponse> __Marshaller_salto_nebula_accessright_v1_ListAccessRightAccessPointGroupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointGroupRequest> __Marshaller_salto_nebula_accessright_v1_UpdateAccessRightAccessPointGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointGroupRequest> __Marshaller_salto_nebula_accessright_v1_DeleteAccessRightAccessPointGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsRequest> __Marshaller_salto_nebula_accessright_v1_BatchDeleteAccessRightAccessPointGroupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsResponse> __Marshaller_salto_nebula_accessright_v1_BatchDeleteAccessRightAccessPointGroupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRight> __Method_CreateAccessRight = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRight>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccessRight",
        __Marshaller_salto_nebula_accessright_v1_CreateAccessRightRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRight);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRight> __Method_GetAccessRight = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRight>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessRight",
        __Marshaller_salto_nebula_accessright_v1_GetAccessRightRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRight);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsRequest, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsResponse> __Method_ListAccessRights = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsRequest, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAccessRights",
        __Marshaller_salto_nebula_accessright_v1_ListAccessRightsRequest,
        __Marshaller_salto_nebula_accessright_v1_ListAccessRightsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRight> __Method_UpdateAccessRight = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRight>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccessRight",
        __Marshaller_salto_nebula_accessright_v1_UpdateAccessRightRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRight);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAccessRight = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccessRight",
        __Marshaller_salto_nebula_accessright_v1_DeleteAccessRightRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> __Method_CreateAccessRightAccessPoint = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccessRightAccessPoint",
        __Marshaller_salto_nebula_accessright_v1_CreateAccessRightAccessPointRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRightAccessPoint);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsRequest, global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsResponse> __Method_BatchCreateAccessRightAccessPoints = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsRequest, global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateAccessRightAccessPoints",
        __Marshaller_salto_nebula_accessright_v1_BatchCreateAccessRightAccessPointsRequest,
        __Marshaller_salto_nebula_accessright_v1_BatchCreateAccessRightAccessPointsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> __Method_GetAccessRightAccessPoint = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessRightAccessPoint",
        __Marshaller_salto_nebula_accessright_v1_GetAccessRightAccessPointRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRightAccessPoint);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsRequest, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsResponse> __Method_ListAccessRightAccessPoints = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsRequest, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAccessRightAccessPoints",
        __Marshaller_salto_nebula_accessright_v1_ListAccessRightAccessPointsRequest,
        __Marshaller_salto_nebula_accessright_v1_ListAccessRightAccessPointsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> __Method_UpdateAccessRightAccessPoint = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccessRightAccessPoint",
        __Marshaller_salto_nebula_accessright_v1_UpdateAccessRightAccessPointRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRightAccessPoint);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAccessRightAccessPoint = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccessRightAccessPoint",
        __Marshaller_salto_nebula_accessright_v1_DeleteAccessRightAccessPointRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsRequest, global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsResponse> __Method_BatchDeleteAccessRightAccessPoints = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsRequest, global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchDeleteAccessRightAccessPoints",
        __Marshaller_salto_nebula_accessright_v1_BatchDeleteAccessRightAccessPointsRequest,
        __Marshaller_salto_nebula_accessright_v1_BatchDeleteAccessRightAccessPointsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointGroupRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> __Method_CreateAccessRightAccessPointGroup = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointGroupRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccessRightAccessPointGroup",
        __Marshaller_salto_nebula_accessright_v1_CreateAccessRightAccessPointGroupRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRightAccessPointGroup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsRequest, global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsResponse> __Method_BatchCreateAccessRightAccessPointGroups = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsRequest, global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateAccessRightAccessPointGroups",
        __Marshaller_salto_nebula_accessright_v1_BatchCreateAccessRightAccessPointGroupsRequest,
        __Marshaller_salto_nebula_accessright_v1_BatchCreateAccessRightAccessPointGroupsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointGroupRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> __Method_GetAccessRightAccessPointGroup = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointGroupRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessRightAccessPointGroup",
        __Marshaller_salto_nebula_accessright_v1_GetAccessRightAccessPointGroupRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRightAccessPointGroup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsRequest, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsResponse> __Method_ListAccessRightAccessPointGroups = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsRequest, global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAccessRightAccessPointGroups",
        __Marshaller_salto_nebula_accessright_v1_ListAccessRightAccessPointGroupsRequest,
        __Marshaller_salto_nebula_accessright_v1_ListAccessRightAccessPointGroupsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointGroupRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> __Method_UpdateAccessRightAccessPointGroup = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointGroupRequest, global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccessRightAccessPointGroup",
        __Marshaller_salto_nebula_accessright_v1_UpdateAccessRightAccessPointGroupRequest,
        __Marshaller_salto_nebula_accessright_v1_AccessRightAccessPointGroup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAccessRightAccessPointGroup = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccessRightAccessPointGroup",
        __Marshaller_salto_nebula_accessright_v1_DeleteAccessRightAccessPointGroupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsRequest, global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsResponse> __Method_BatchDeleteAccessRightAccessPointGroups = new grpc::Method<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsRequest, global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchDeleteAccessRightAccessPointGroups",
        __Marshaller_salto_nebula_accessright_v1_BatchDeleteAccessRightAccessPointGroupsRequest,
        __Marshaller_salto_nebula_accessright_v1_BatchDeleteAccessRightAccessPointGroupsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Saltoapis.Nebula.AccessRight.V1.AccessRightReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for AccessRightService</summary>
    public partial class AccessRightServiceClient : grpc::ClientBase<AccessRightServiceClient>
    {
      /// <summary>Creates a new client for AccessRightService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AccessRightServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AccessRightService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AccessRightServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AccessRightServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AccessRightServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an access right
      ///
      /// Creates a new access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRight CreateAccessRight(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessRight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an access right
      ///
      /// Creates a new access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRight CreateAccessRight(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccessRight, null, options, request);
      }
      /// <summary>
      /// Create an access right
      ///
      /// Creates a new access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRight> CreateAccessRightAsync(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessRightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an access right
      ///
      /// Creates a new access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRight> CreateAccessRightAsync(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccessRight, null, options, request);
      }
      /// <summary>
      /// Get an access right
      ///
      /// Retrieves an existing access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRight GetAccessRight(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessRight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an access right
      ///
      /// Retrieves an existing access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRight GetAccessRight(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessRight, null, options, request);
      }
      /// <summary>
      /// Get an access right
      ///
      /// Retrieves an existing access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRight> GetAccessRightAsync(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessRightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an access right
      ///
      /// Retrieves an existing access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRight> GetAccessRightAsync(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessRight, null, options, request);
      }
      /// <summary>
      /// List access rights
      ///
      /// Returns a list of access rights that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsResponse ListAccessRights(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessRights(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List access rights
      ///
      /// Returns a list of access rights that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsResponse ListAccessRights(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAccessRights, null, options, request);
      }
      /// <summary>
      /// List access rights
      ///
      /// Returns a list of access rights that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsResponse> ListAccessRightsAsync(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessRightsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List access rights
      ///
      /// Returns a list of access rights that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsResponse> ListAccessRightsAsync(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAccessRights, null, options, request);
      }
      /// <summary>
      /// Update an access right
      ///
      /// Updates an existing access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRight UpdateAccessRight(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessRight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an access right
      ///
      /// Updates an existing access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRight UpdateAccessRight(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccessRight, null, options, request);
      }
      /// <summary>
      /// Update an access right
      ///
      /// Updates an existing access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRight> UpdateAccessRightAsync(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessRightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an access right
      ///
      /// Updates an existing access right.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRight> UpdateAccessRightAsync(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccessRight, null, options, request);
      }
      /// <summary>
      /// Delete an access right
      ///
      /// Permanently deletes an access right. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAccessRight(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessRight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an access right
      ///
      /// Permanently deletes an access right. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAccessRight(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccessRight, null, options, request);
      }
      /// <summary>
      /// Delete an access right
      ///
      /// Permanently deletes an access right. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAccessRightAsync(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessRightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an access right
      ///
      /// Permanently deletes an access right. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAccessRightAsync(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccessRight, null, options, request);
      }
      /// <summary>
      /// Create an access point
      ///
      /// Creates an access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint CreateAccessRightAccessPoint(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessRightAccessPoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an access point
      ///
      /// Creates an access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint CreateAccessRightAccessPoint(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccessRightAccessPoint, null, options, request);
      }
      /// <summary>
      /// Create an access point
      ///
      /// Creates an access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> CreateAccessRightAccessPointAsync(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessRightAccessPointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an access point
      ///
      /// Creates an access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> CreateAccessRightAccessPointAsync(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccessRightAccessPoint, null, options, request);
      }
      /// <summary>
      /// Create a batch of access rights access points
      ///
      /// Creates a batch of access rights access points associations.
      /// This method allows the creation of multiple access rights access points in a single operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsResponse BatchCreateAccessRightAccessPoints(global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateAccessRightAccessPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a batch of access rights access points
      ///
      /// Creates a batch of access rights access points associations.
      /// This method allows the creation of multiple access rights access points in a single operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsResponse BatchCreateAccessRightAccessPoints(global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateAccessRightAccessPoints, null, options, request);
      }
      /// <summary>
      /// Create a batch of access rights access points
      ///
      /// Creates a batch of access rights access points associations.
      /// This method allows the creation of multiple access rights access points in a single operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsResponse> BatchCreateAccessRightAccessPointsAsync(global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateAccessRightAccessPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a batch of access rights access points
      ///
      /// Creates a batch of access rights access points associations.
      /// This method allows the creation of multiple access rights access points in a single operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsResponse> BatchCreateAccessRightAccessPointsAsync(global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateAccessRightAccessPoints, null, options, request);
      }
      /// <summary>
      /// Get an access point
      ///
      /// Retrieves an existing access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint GetAccessRightAccessPoint(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessRightAccessPoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an access point
      ///
      /// Retrieves an existing access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint GetAccessRightAccessPoint(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessRightAccessPoint, null, options, request);
      }
      /// <summary>
      /// Get an access point
      ///
      /// Retrieves an existing access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> GetAccessRightAccessPointAsync(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessRightAccessPointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an access point
      ///
      /// Retrieves an existing access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> GetAccessRightAccessPointAsync(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessRightAccessPoint, null, options, request);
      }
      /// <summary>
      /// List access points
      ///
      /// Lists an existing access right's access point associations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsResponse ListAccessRightAccessPoints(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessRightAccessPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List access points
      ///
      /// Lists an existing access right's access point associations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsResponse ListAccessRightAccessPoints(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAccessRightAccessPoints, null, options, request);
      }
      /// <summary>
      /// List access points
      ///
      /// Lists an existing access right's access point associations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsResponse> ListAccessRightAccessPointsAsync(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessRightAccessPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List access points
      ///
      /// Lists an existing access right's access point associations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsResponse> ListAccessRightAccessPointsAsync(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAccessRightAccessPoints, null, options, request);
      }
      /// <summary>
      /// Update an access point
      ///
      /// Updates an existing access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint UpdateAccessRightAccessPoint(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessRightAccessPoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an access point
      ///
      /// Updates an existing access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint UpdateAccessRightAccessPoint(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccessRightAccessPoint, null, options, request);
      }
      /// <summary>
      /// Update an access point
      ///
      /// Updates an existing access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> UpdateAccessRightAccessPointAsync(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessRightAccessPointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an access point
      ///
      /// Updates an existing access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPoint> UpdateAccessRightAccessPointAsync(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccessRightAccessPoint, null, options, request);
      }
      /// <summary>
      /// Delete an access point
      ///
      /// Deletes an access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAccessRightAccessPoint(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessRightAccessPoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an access point
      ///
      /// Deletes an access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAccessRightAccessPoint(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccessRightAccessPoint, null, options, request);
      }
      /// <summary>
      /// Delete an access point
      ///
      /// Deletes an access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAccessRightAccessPointAsync(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessRightAccessPointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an access point
      ///
      /// Deletes an access right's access point association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAccessRightAccessPointAsync(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccessRightAccessPoint, null, options, request);
      }
      /// <summary>
      /// Delete a batch of access points
      ///
      /// Permanently deletes a batch of access right's access point associations.
      /// This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsResponse BatchDeleteAccessRightAccessPoints(global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeleteAccessRightAccessPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a batch of access points
      ///
      /// Permanently deletes a batch of access right's access point associations.
      /// This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsResponse BatchDeleteAccessRightAccessPoints(global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchDeleteAccessRightAccessPoints, null, options, request);
      }
      /// <summary>
      /// Delete a batch of access points
      ///
      /// Permanently deletes a batch of access right's access point associations.
      /// This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsResponse> BatchDeleteAccessRightAccessPointsAsync(global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeleteAccessRightAccessPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a batch of access points
      ///
      /// Permanently deletes a batch of access right's access point associations.
      /// This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsResponse> BatchDeleteAccessRightAccessPointsAsync(global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchDeleteAccessRightAccessPoints, null, options, request);
      }
      /// <summary>
      /// Create an access point group
      ///
      /// Creates an access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup CreateAccessRightAccessPointGroup(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessRightAccessPointGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an access point group
      ///
      /// Creates an access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup CreateAccessRightAccessPointGroup(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccessRightAccessPointGroup, null, options, request);
      }
      /// <summary>
      /// Create an access point group
      ///
      /// Creates an access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> CreateAccessRightAccessPointGroupAsync(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessRightAccessPointGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an access point group
      ///
      /// Creates an access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> CreateAccessRightAccessPointGroupAsync(global::Saltoapis.Nebula.AccessRight.V1.CreateAccessRightAccessPointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccessRightAccessPointGroup, null, options, request);
      }
      /// <summary>
      /// Create a batch of access right's access point groups
      ///
      /// Creates a batch of access right's access point groups associations.
      /// This method allows the creation of multiple access right's access point groups in a single operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsResponse BatchCreateAccessRightAccessPointGroups(global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateAccessRightAccessPointGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a batch of access right's access point groups
      ///
      /// Creates a batch of access right's access point groups associations.
      /// This method allows the creation of multiple access right's access point groups in a single operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsResponse BatchCreateAccessRightAccessPointGroups(global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateAccessRightAccessPointGroups, null, options, request);
      }
      /// <summary>
      /// Create a batch of access right's access point groups
      ///
      /// Creates a batch of access right's access point groups associations.
      /// This method allows the creation of multiple access right's access point groups in a single operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsResponse> BatchCreateAccessRightAccessPointGroupsAsync(global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateAccessRightAccessPointGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a batch of access right's access point groups
      ///
      /// Creates a batch of access right's access point groups associations.
      /// This method allows the creation of multiple access right's access point groups in a single operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsResponse> BatchCreateAccessRightAccessPointGroupsAsync(global::Saltoapis.Nebula.AccessRight.V1.BatchCreateAccessRightAccessPointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateAccessRightAccessPointGroups, null, options, request);
      }
      /// <summary>
      /// Get an access point group
      ///
      /// Retrieves an existing access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup GetAccessRightAccessPointGroup(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessRightAccessPointGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an access point group
      ///
      /// Retrieves an existing access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup GetAccessRightAccessPointGroup(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessRightAccessPointGroup, null, options, request);
      }
      /// <summary>
      /// Get an access point group
      ///
      /// Retrieves an existing access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> GetAccessRightAccessPointGroupAsync(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessRightAccessPointGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an access point group
      ///
      /// Retrieves an existing access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> GetAccessRightAccessPointGroupAsync(global::Saltoapis.Nebula.AccessRight.V1.GetAccessRightAccessPointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessRightAccessPointGroup, null, options, request);
      }
      /// <summary>
      /// List access point groups
      ///
      /// Lists an existing access right's access point group associations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsResponse ListAccessRightAccessPointGroups(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessRightAccessPointGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List access point groups
      ///
      /// Lists an existing access right's access point group associations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsResponse ListAccessRightAccessPointGroups(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAccessRightAccessPointGroups, null, options, request);
      }
      /// <summary>
      /// List access point groups
      ///
      /// Lists an existing access right's access point group associations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsResponse> ListAccessRightAccessPointGroupsAsync(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessRightAccessPointGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List access point groups
      ///
      /// Lists an existing access right's access point group associations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsResponse> ListAccessRightAccessPointGroupsAsync(global::Saltoapis.Nebula.AccessRight.V1.ListAccessRightAccessPointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAccessRightAccessPointGroups, null, options, request);
      }
      /// <summary>
      /// Update an access point group
      ///
      /// Updates an existing access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup UpdateAccessRightAccessPointGroup(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessRightAccessPointGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an access point group
      ///
      /// Updates an existing access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup UpdateAccessRightAccessPointGroup(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccessRightAccessPointGroup, null, options, request);
      }
      /// <summary>
      /// Update an access point group
      ///
      /// Updates an existing access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> UpdateAccessRightAccessPointGroupAsync(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessRightAccessPointGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an access point group
      ///
      /// Updates an existing access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.AccessRightAccessPointGroup> UpdateAccessRightAccessPointGroupAsync(global::Saltoapis.Nebula.AccessRight.V1.UpdateAccessRightAccessPointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccessRightAccessPointGroup, null, options, request);
      }
      /// <summary>
      /// Delete an access point group
      ///
      /// Deletes an access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAccessRightAccessPointGroup(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessRightAccessPointGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an access point group
      ///
      /// Deletes an access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAccessRightAccessPointGroup(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccessRightAccessPointGroup, null, options, request);
      }
      /// <summary>
      /// Delete an access point group
      ///
      /// Deletes an access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAccessRightAccessPointGroupAsync(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessRightAccessPointGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an access point group
      ///
      /// Deletes an access right's access point group association.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAccessRightAccessPointGroupAsync(global::Saltoapis.Nebula.AccessRight.V1.DeleteAccessRightAccessPointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccessRightAccessPointGroup, null, options, request);
      }
      /// <summary>
      /// Delete a batch of access point groups
      ///
      /// Permanently deletes a batch access right's access point group associations. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsResponse BatchDeleteAccessRightAccessPointGroups(global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeleteAccessRightAccessPointGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a batch of access point groups
      ///
      /// Permanently deletes a batch access right's access point group associations. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsResponse BatchDeleteAccessRightAccessPointGroups(global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchDeleteAccessRightAccessPointGroups, null, options, request);
      }
      /// <summary>
      /// Delete a batch of access point groups
      ///
      /// Permanently deletes a batch access right's access point group associations. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsResponse> BatchDeleteAccessRightAccessPointGroupsAsync(global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeleteAccessRightAccessPointGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a batch of access point groups
      ///
      /// Permanently deletes a batch access right's access point group associations. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsResponse> BatchDeleteAccessRightAccessPointGroupsAsync(global::Saltoapis.Nebula.AccessRight.V1.BatchDeleteAccessRightAccessPointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchDeleteAccessRightAccessPointGroups, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AccessRightServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AccessRightServiceClient(configuration);
      }
    }

  }
}
#endregion
