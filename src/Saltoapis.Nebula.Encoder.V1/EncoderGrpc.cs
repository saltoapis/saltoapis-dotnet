// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: salto/nebula/encoder/v1/encoder.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Saltoapis.Nebula.Encoder.V1 {
  /// <summary>
  /// A card encoder is an external device that reads and updates physical card
  /// keys with access information. This service is responsible for managing
  /// encoder resources.
  /// </summary>
  public static partial class EncoderService
  {
    static readonly string __ServiceName = "salto.nebula.encoder.v1.EncoderService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.CreateEncoderRequest> __Marshaller_salto_nebula_encoder_v1_CreateEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.CreateEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.Encoder> __Marshaller_salto_nebula_encoder_v1_Encoder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.Encoder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.GetEncoderRequest> __Marshaller_salto_nebula_encoder_v1_GetEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.GetEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.ListEncodersRequest> __Marshaller_salto_nebula_encoder_v1_ListEncodersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.ListEncodersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.ListEncodersResponse> __Marshaller_salto_nebula_encoder_v1_ListEncodersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.ListEncodersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.UpdateEncoderRequest> __Marshaller_salto_nebula_encoder_v1_UpdateEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.UpdateEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.DeleteEncoderRequest> __Marshaller_salto_nebula_encoder_v1_DeleteEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.DeleteEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.InitializeEncoderRequest> __Marshaller_salto_nebula_encoder_v1_InitializeEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.InitializeEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Longrunning.V1.Operation> __Marshaller_salto_longrunning_v1_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Longrunning.V1.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.ConfigureEncoderRequest> __Marshaller_salto_nebula_encoder_v1_ConfigureEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.ConfigureEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.ResetEncoderRequest> __Marshaller_salto_nebula_encoder_v1_ResetEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.ResetEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.BindEncoderRequest> __Marshaller_salto_nebula_encoder_v1_BindEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.BindEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.BindEncoderResponse> __Marshaller_salto_nebula_encoder_v1_BindEncoderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.BindEncoderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderRequest> __Marshaller_salto_nebula_encoder_v1_UnbindEncoderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderResponse> __Marshaller_salto_nebula_encoder_v1_UnbindEncoderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.CreateEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.Encoder> __Method_CreateEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.CreateEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.Encoder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEncoder",
        __Marshaller_salto_nebula_encoder_v1_CreateEncoderRequest,
        __Marshaller_salto_nebula_encoder_v1_Encoder);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.GetEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.Encoder> __Method_GetEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.GetEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.Encoder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEncoder",
        __Marshaller_salto_nebula_encoder_v1_GetEncoderRequest,
        __Marshaller_salto_nebula_encoder_v1_Encoder);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.ListEncodersRequest, global::Saltoapis.Nebula.Encoder.V1.ListEncodersResponse> __Method_ListEncoders = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.ListEncodersRequest, global::Saltoapis.Nebula.Encoder.V1.ListEncodersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListEncoders",
        __Marshaller_salto_nebula_encoder_v1_ListEncodersRequest,
        __Marshaller_salto_nebula_encoder_v1_ListEncodersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.UpdateEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.Encoder> __Method_UpdateEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.UpdateEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.Encoder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEncoder",
        __Marshaller_salto_nebula_encoder_v1_UpdateEncoderRequest,
        __Marshaller_salto_nebula_encoder_v1_Encoder);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.DeleteEncoderRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.DeleteEncoderRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEncoder",
        __Marshaller_salto_nebula_encoder_v1_DeleteEncoderRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.InitializeEncoderRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_InitializeEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.InitializeEncoderRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeEncoder",
        __Marshaller_salto_nebula_encoder_v1_InitializeEncoderRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.ConfigureEncoderRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_ConfigureEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.ConfigureEncoderRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigureEncoder",
        __Marshaller_salto_nebula_encoder_v1_ConfigureEncoderRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.ResetEncoderRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_ResetEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.ResetEncoderRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetEncoder",
        __Marshaller_salto_nebula_encoder_v1_ResetEncoderRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.BindEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.BindEncoderResponse> __Method_BindEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.BindEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.BindEncoderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BindEncoder",
        __Marshaller_salto_nebula_encoder_v1_BindEncoderRequest,
        __Marshaller_salto_nebula_encoder_v1_BindEncoderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderResponse> __Method_UnbindEncoder = new grpc::Method<global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderRequest, global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnbindEncoder",
        __Marshaller_salto_nebula_encoder_v1_UnbindEncoderRequest,
        __Marshaller_salto_nebula_encoder_v1_UnbindEncoderResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Saltoapis.Nebula.Encoder.V1.EncoderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for EncoderService</summary>
    public partial class EncoderServiceClient : grpc::ClientBase<EncoderServiceClient>
    {
      /// <summary>Creates a new client for EncoderService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EncoderServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EncoderService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EncoderServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EncoderServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EncoderServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an encoder
      ///
      /// Creates a new encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.Encoder CreateEncoder(global::Saltoapis.Nebula.Encoder.V1.CreateEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an encoder
      ///
      /// Creates a new encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.Encoder CreateEncoder(global::Saltoapis.Nebula.Encoder.V1.CreateEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEncoder, null, options, request);
      }
      /// <summary>
      /// Create an encoder
      ///
      /// Creates a new encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.Encoder> CreateEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.CreateEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an encoder
      ///
      /// Creates a new encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.Encoder> CreateEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.CreateEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEncoder, null, options, request);
      }
      /// <summary>
      /// Get an encoder
      ///
      /// Gets an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.Encoder GetEncoder(global::Saltoapis.Nebula.Encoder.V1.GetEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an encoder
      ///
      /// Gets an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.Encoder GetEncoder(global::Saltoapis.Nebula.Encoder.V1.GetEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEncoder, null, options, request);
      }
      /// <summary>
      /// Get an encoder
      ///
      /// Gets an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.Encoder> GetEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.GetEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an encoder
      ///
      /// Gets an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.Encoder> GetEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.GetEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEncoder, null, options, request);
      }
      /// <summary>
      /// List encoders
      ///
      /// Returns a list of encoders that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.ListEncodersResponse ListEncoders(global::Saltoapis.Nebula.Encoder.V1.ListEncodersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEncoders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List encoders
      ///
      /// Returns a list of encoders that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.ListEncodersResponse ListEncoders(global::Saltoapis.Nebula.Encoder.V1.ListEncodersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListEncoders, null, options, request);
      }
      /// <summary>
      /// List encoders
      ///
      /// Returns a list of encoders that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.ListEncodersResponse> ListEncodersAsync(global::Saltoapis.Nebula.Encoder.V1.ListEncodersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEncodersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List encoders
      ///
      /// Returns a list of encoders that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.ListEncodersResponse> ListEncodersAsync(global::Saltoapis.Nebula.Encoder.V1.ListEncodersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListEncoders, null, options, request);
      }
      /// <summary>
      /// Update an encoder
      ///
      /// Updates an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.Encoder UpdateEncoder(global::Saltoapis.Nebula.Encoder.V1.UpdateEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an encoder
      ///
      /// Updates an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.Encoder UpdateEncoder(global::Saltoapis.Nebula.Encoder.V1.UpdateEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEncoder, null, options, request);
      }
      /// <summary>
      /// Update an encoder
      ///
      /// Updates an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.Encoder> UpdateEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.UpdateEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an encoder
      ///
      /// Updates an existing encoder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.Encoder> UpdateEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.UpdateEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEncoder, null, options, request);
      }
      /// <summary>
      /// Delete an encoder
      ///
      /// Permanently deletes an encoder. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteEncoder(global::Saltoapis.Nebula.Encoder.V1.DeleteEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an encoder
      ///
      /// Permanently deletes an encoder. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteEncoder(global::Saltoapis.Nebula.Encoder.V1.DeleteEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEncoder, null, options, request);
      }
      /// <summary>
      /// Delete an encoder
      ///
      /// Permanently deletes an encoder. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.DeleteEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an encoder
      ///
      /// Permanently deletes an encoder. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.DeleteEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEncoder, null, options, request);
      }
      /// <summary>
      /// Initialize an encoder
      ///
      /// Initializes an encoder. Encoders need to be initialized before
      /// you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation InitializeEncoder(global::Saltoapis.Nebula.Encoder.V1.InitializeEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initialize an encoder
      ///
      /// Initializes an encoder. Encoders need to be initialized before
      /// you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation InitializeEncoder(global::Saltoapis.Nebula.Encoder.V1.InitializeEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeEncoder, null, options, request);
      }
      /// <summary>
      /// Initialize an encoder
      ///
      /// Initializes an encoder. Encoders need to be initialized before
      /// you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> InitializeEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.InitializeEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initialize an encoder
      ///
      /// Initializes an encoder. Encoders need to be initialized before
      /// you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> InitializeEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.InitializeEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeEncoder, null, options, request);
      }
      /// <summary>
      /// Configure an encoder
      ///
      /// Configures an encoder. Configuring an encoder implies adding some
      /// information to the encoder based on the current settings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ConfigureEncoder(global::Saltoapis.Nebula.Encoder.V1.ConfigureEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configure an encoder
      ///
      /// Configures an encoder. Configuring an encoder implies adding some
      /// information to the encoder based on the current settings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ConfigureEncoder(global::Saltoapis.Nebula.Encoder.V1.ConfigureEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigureEncoder, null, options, request);
      }
      /// <summary>
      /// Configure an encoder
      ///
      /// Configures an encoder. Configuring an encoder implies adding some
      /// information to the encoder based on the current settings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ConfigureEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.ConfigureEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configure an encoder
      ///
      /// Configures an encoder. Configuring an encoder implies adding some
      /// information to the encoder based on the current settings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ConfigureEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.ConfigureEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigureEncoder, null, options, request);
      }
      /// <summary>
      /// Reset an encoder
      ///
      /// Resetting a device such as an encoder means returning it to its factory
      /// settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ResetEncoder(global::Saltoapis.Nebula.Encoder.V1.ResetEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reset an encoder
      ///
      /// Resetting a device such as an encoder means returning it to its factory
      /// settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ResetEncoder(global::Saltoapis.Nebula.Encoder.V1.ResetEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetEncoder, null, options, request);
      }
      /// <summary>
      /// Reset an encoder
      ///
      /// Resetting a device such as an encoder means returning it to its factory
      /// settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ResetEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.ResetEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reset an encoder
      ///
      /// Resetting a device such as an encoder means returning it to its factory
      /// settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ResetEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.ResetEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetEncoder, null, options, request);
      }
      /// <summary>
      /// Bind an encoder
      ///
      /// Binds an encoder. Binding an encoder assigns a device
      /// identifier to the encoder. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.BindEncoderResponse BindEncoder(global::Saltoapis.Nebula.Encoder.V1.BindEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BindEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bind an encoder
      ///
      /// Binds an encoder. Binding an encoder assigns a device
      /// identifier to the encoder. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.BindEncoderResponse BindEncoder(global::Saltoapis.Nebula.Encoder.V1.BindEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BindEncoder, null, options, request);
      }
      /// <summary>
      /// Bind an encoder
      ///
      /// Binds an encoder. Binding an encoder assigns a device
      /// identifier to the encoder. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.BindEncoderResponse> BindEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.BindEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BindEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bind an encoder
      ///
      /// Binds an encoder. Binding an encoder assigns a device
      /// identifier to the encoder. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.BindEncoderResponse> BindEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.BindEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BindEncoder, null, options, request);
      }
      /// <summary>
      /// Unbind an encoder
      ///
      /// Unbinds an encoder. Unbinding an encoder removes the
      /// device identifier from the encoder. This may be required in some
      /// cases where the encoder is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderResponse UnbindEncoder(global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnbindEncoder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unbind an encoder
      ///
      /// Unbinds an encoder. Unbinding an encoder removes the
      /// device identifier from the encoder. This may be required in some
      /// cases where the encoder is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderResponse UnbindEncoder(global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnbindEncoder, null, options, request);
      }
      /// <summary>
      /// Unbind an encoder
      ///
      /// Unbinds an encoder. Unbinding an encoder removes the
      /// device identifier from the encoder. This may be required in some
      /// cases where the encoder is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderResponse> UnbindEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnbindEncoderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unbind an encoder
      ///
      /// Unbinds an encoder. Unbinding an encoder removes the
      /// device identifier from the encoder. This may be required in some
      /// cases where the encoder is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderResponse> UnbindEncoderAsync(global::Saltoapis.Nebula.Encoder.V1.UnbindEncoderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnbindEncoder, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override EncoderServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EncoderServiceClient(configuration);
      }
    }

  }
}
#endregion
