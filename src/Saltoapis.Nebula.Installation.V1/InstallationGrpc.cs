// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: salto/nebula/installation/v1/installation.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Saltoapis.Nebula.Installation.V1 {
  /// <summary>
  /// An installation represents any entity such as a company, office or building
  /// that contains all the access control objects (access points, access rights,
  /// users, etc.) that comprise the access control system within a facility.
  /// </summary>
  public static partial class InstallationService
  {
    static readonly string __ServiceName = "salto.nebula.installation.v1.InstallationService";

    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.CreateInstallationRequest> __Marshaller_salto_nebula_installation_v1_CreateInstallationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.CreateInstallationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.Installation> __Marshaller_salto_nebula_installation_v1_Installation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.Installation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.GetInstallationRequest> __Marshaller_salto_nebula_installation_v1_GetInstallationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.GetInstallationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.ListInstallationsRequest> __Marshaller_salto_nebula_installation_v1_ListInstallationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.ListInstallationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.ListInstallationsResponse> __Marshaller_salto_nebula_installation_v1_ListInstallationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.ListInstallationsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.UpdateInstallationRequest> __Marshaller_salto_nebula_installation_v1_UpdateInstallationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.UpdateInstallationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.DeleteInstallationRequest> __Marshaller_salto_nebula_installation_v1_DeleteInstallationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.DeleteInstallationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.CreatePolicyRequest> __Marshaller_salto_nebula_installation_v1_CreatePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.CreatePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.Policy> __Marshaller_salto_nebula_installation_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.GetPolicyRequest> __Marshaller_salto_nebula_installation_v1_GetPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.GetPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.ListPoliciesRequest> __Marshaller_salto_nebula_installation_v1_ListPoliciesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.ListPoliciesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.ListPoliciesResponse> __Marshaller_salto_nebula_installation_v1_ListPoliciesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.ListPoliciesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.UpdatePolicyRequest> __Marshaller_salto_nebula_installation_v1_UpdatePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.UpdatePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.DeletePolicyRequest> __Marshaller_salto_nebula_installation_v1_DeletePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.DeletePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.TestPermissionsRequest> __Marshaller_salto_nebula_installation_v1_TestPermissionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.TestPermissionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.Installation.V1.TestPermissionsResponse> __Marshaller_salto_nebula_installation_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Saltoapis.Nebula.Installation.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.CreateInstallationRequest, global::Saltoapis.Nebula.Installation.V1.Installation> __Method_CreateInstallation = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.CreateInstallationRequest, global::Saltoapis.Nebula.Installation.V1.Installation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateInstallation",
        __Marshaller_salto_nebula_installation_v1_CreateInstallationRequest,
        __Marshaller_salto_nebula_installation_v1_Installation);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.GetInstallationRequest, global::Saltoapis.Nebula.Installation.V1.Installation> __Method_GetInstallation = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.GetInstallationRequest, global::Saltoapis.Nebula.Installation.V1.Installation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInstallation",
        __Marshaller_salto_nebula_installation_v1_GetInstallationRequest,
        __Marshaller_salto_nebula_installation_v1_Installation);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.ListInstallationsRequest, global::Saltoapis.Nebula.Installation.V1.ListInstallationsResponse> __Method_ListInstallations = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.ListInstallationsRequest, global::Saltoapis.Nebula.Installation.V1.ListInstallationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInstallations",
        __Marshaller_salto_nebula_installation_v1_ListInstallationsRequest,
        __Marshaller_salto_nebula_installation_v1_ListInstallationsResponse);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.UpdateInstallationRequest, global::Saltoapis.Nebula.Installation.V1.Installation> __Method_UpdateInstallation = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.UpdateInstallationRequest, global::Saltoapis.Nebula.Installation.V1.Installation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateInstallation",
        __Marshaller_salto_nebula_installation_v1_UpdateInstallationRequest,
        __Marshaller_salto_nebula_installation_v1_Installation);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.DeleteInstallationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteInstallation = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.DeleteInstallationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInstallation",
        __Marshaller_salto_nebula_installation_v1_DeleteInstallationRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.CreatePolicyRequest, global::Saltoapis.Nebula.Installation.V1.Policy> __Method_CreatePolicy = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.CreatePolicyRequest, global::Saltoapis.Nebula.Installation.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePolicy",
        __Marshaller_salto_nebula_installation_v1_CreatePolicyRequest,
        __Marshaller_salto_nebula_installation_v1_Policy);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.GetPolicyRequest, global::Saltoapis.Nebula.Installation.V1.Policy> __Method_GetPolicy = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.GetPolicyRequest, global::Saltoapis.Nebula.Installation.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPolicy",
        __Marshaller_salto_nebula_installation_v1_GetPolicyRequest,
        __Marshaller_salto_nebula_installation_v1_Policy);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.ListPoliciesRequest, global::Saltoapis.Nebula.Installation.V1.ListPoliciesResponse> __Method_ListPolicies = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.ListPoliciesRequest, global::Saltoapis.Nebula.Installation.V1.ListPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPolicies",
        __Marshaller_salto_nebula_installation_v1_ListPoliciesRequest,
        __Marshaller_salto_nebula_installation_v1_ListPoliciesResponse);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.UpdatePolicyRequest, global::Saltoapis.Nebula.Installation.V1.Policy> __Method_UpdatePolicy = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.UpdatePolicyRequest, global::Saltoapis.Nebula.Installation.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePolicy",
        __Marshaller_salto_nebula_installation_v1_UpdatePolicyRequest,
        __Marshaller_salto_nebula_installation_v1_Policy);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.DeletePolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeletePolicy = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.DeletePolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePolicy",
        __Marshaller_salto_nebula_installation_v1_DeletePolicyRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Saltoapis.Nebula.Installation.V1.TestPermissionsRequest, global::Saltoapis.Nebula.Installation.V1.TestPermissionsResponse> __Method_TestPermissions = new grpc::Method<global::Saltoapis.Nebula.Installation.V1.TestPermissionsRequest, global::Saltoapis.Nebula.Installation.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestPermissions",
        __Marshaller_salto_nebula_installation_v1_TestPermissionsRequest,
        __Marshaller_salto_nebula_installation_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Saltoapis.Nebula.Installation.V1.InstallationReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for InstallationService</summary>
    public partial class InstallationServiceClient : grpc::ClientBase<InstallationServiceClient>
    {
      /// <summary>Creates a new client for InstallationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InstallationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InstallationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InstallationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InstallationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InstallationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create an installation
      ///
      /// Creates a new installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Installation CreateInstallation(global::Saltoapis.Nebula.Installation.V1.CreateInstallationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInstallation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an installation
      ///
      /// Creates a new installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Installation CreateInstallation(global::Saltoapis.Nebula.Installation.V1.CreateInstallationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateInstallation, null, options, request);
      }
      /// <summary>
      /// Create an installation
      ///
      /// Creates a new installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Installation> CreateInstallationAsync(global::Saltoapis.Nebula.Installation.V1.CreateInstallationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInstallationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an installation
      ///
      /// Creates a new installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Installation> CreateInstallationAsync(global::Saltoapis.Nebula.Installation.V1.CreateInstallationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateInstallation, null, options, request);
      }
      /// <summary>
      /// Get an installation
      ///
      /// Retrieves an existing installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Installation GetInstallation(global::Saltoapis.Nebula.Installation.V1.GetInstallationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstallation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an installation
      ///
      /// Retrieves an existing installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Installation GetInstallation(global::Saltoapis.Nebula.Installation.V1.GetInstallationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstallation, null, options, request);
      }
      /// <summary>
      /// Get an installation
      ///
      /// Retrieves an existing installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Installation> GetInstallationAsync(global::Saltoapis.Nebula.Installation.V1.GetInstallationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstallationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an installation
      ///
      /// Retrieves an existing installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Installation> GetInstallationAsync(global::Saltoapis.Nebula.Installation.V1.GetInstallationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstallation, null, options, request);
      }
      /// <summary>
      /// List installations
      ///
      /// Returns a list of installations that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.ListInstallationsResponse ListInstallations(global::Saltoapis.Nebula.Installation.V1.ListInstallationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstallations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List installations
      ///
      /// Returns a list of installations that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.ListInstallationsResponse ListInstallations(global::Saltoapis.Nebula.Installation.V1.ListInstallationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstallations, null, options, request);
      }
      /// <summary>
      /// List installations
      ///
      /// Returns a list of installations that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.ListInstallationsResponse> ListInstallationsAsync(global::Saltoapis.Nebula.Installation.V1.ListInstallationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstallationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List installations
      ///
      /// Returns a list of installations that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.ListInstallationsResponse> ListInstallationsAsync(global::Saltoapis.Nebula.Installation.V1.ListInstallationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstallations, null, options, request);
      }
      /// <summary>
      /// Update an installation
      ///
      /// Updates an existing installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Installation UpdateInstallation(global::Saltoapis.Nebula.Installation.V1.UpdateInstallationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInstallation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an installation
      ///
      /// Updates an existing installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Installation UpdateInstallation(global::Saltoapis.Nebula.Installation.V1.UpdateInstallationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateInstallation, null, options, request);
      }
      /// <summary>
      /// Update an installation
      ///
      /// Updates an existing installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Installation> UpdateInstallationAsync(global::Saltoapis.Nebula.Installation.V1.UpdateInstallationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInstallationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an installation
      ///
      /// Updates an existing installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Installation> UpdateInstallationAsync(global::Saltoapis.Nebula.Installation.V1.UpdateInstallationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateInstallation, null, options, request);
      }
      /// <summary>
      /// Delete an installation
      ///
      /// Permanently deletes an installation. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteInstallation(global::Saltoapis.Nebula.Installation.V1.DeleteInstallationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstallation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an installation
      ///
      /// Permanently deletes an installation. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteInstallation(global::Saltoapis.Nebula.Installation.V1.DeleteInstallationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInstallation, null, options, request);
      }
      /// <summary>
      /// Delete an installation
      ///
      /// Permanently deletes an installation. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteInstallationAsync(global::Saltoapis.Nebula.Installation.V1.DeleteInstallationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstallationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an installation
      ///
      /// Permanently deletes an installation. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteInstallationAsync(global::Saltoapis.Nebula.Installation.V1.DeleteInstallationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInstallation, null, options, request);
      }
      /// <summary>
      /// Create a policy
      ///
      /// Creates a policy for the installation. An IAM policy is a collection of
      /// roles associated to users that define who has what type of access to manage
      /// access control objects within the installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Policy CreatePolicy(global::Saltoapis.Nebula.Installation.V1.CreatePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a policy
      ///
      /// Creates a policy for the installation. An IAM policy is a collection of
      /// roles associated to users that define who has what type of access to manage
      /// access control objects within the installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Policy CreatePolicy(global::Saltoapis.Nebula.Installation.V1.CreatePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePolicy, null, options, request);
      }
      /// <summary>
      /// Create a policy
      ///
      /// Creates a policy for the installation. An IAM policy is a collection of
      /// roles associated to users that define who has what type of access to manage
      /// access control objects within the installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Policy> CreatePolicyAsync(global::Saltoapis.Nebula.Installation.V1.CreatePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a policy
      ///
      /// Creates a policy for the installation. An IAM policy is a collection of
      /// roles associated to users that define who has what type of access to manage
      /// access control objects within the installation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Policy> CreatePolicyAsync(global::Saltoapis.Nebula.Installation.V1.CreatePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePolicy, null, options, request);
      }
      /// <summary>
      /// Get a policy
      ///
      /// Retrieves an existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Policy GetPolicy(global::Saltoapis.Nebula.Installation.V1.GetPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a policy
      ///
      /// Retrieves an existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Policy GetPolicy(global::Saltoapis.Nebula.Installation.V1.GetPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPolicy, null, options, request);
      }
      /// <summary>
      /// Get a policy
      ///
      /// Retrieves an existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Policy> GetPolicyAsync(global::Saltoapis.Nebula.Installation.V1.GetPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a policy
      ///
      /// Retrieves an existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Policy> GetPolicyAsync(global::Saltoapis.Nebula.Installation.V1.GetPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPolicy, null, options, request);
      }
      /// <summary>
      /// List policies
      ///
      /// Returns a list of policies that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.ListPoliciesResponse ListPolicies(global::Saltoapis.Nebula.Installation.V1.ListPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List policies
      ///
      /// Returns a list of policies that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.ListPoliciesResponse ListPolicies(global::Saltoapis.Nebula.Installation.V1.ListPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPolicies, null, options, request);
      }
      /// <summary>
      /// List policies
      ///
      /// Returns a list of policies that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.ListPoliciesResponse> ListPoliciesAsync(global::Saltoapis.Nebula.Installation.V1.ListPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List policies
      ///
      /// Returns a list of policies that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.ListPoliciesResponse> ListPoliciesAsync(global::Saltoapis.Nebula.Installation.V1.ListPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPolicies, null, options, request);
      }
      /// <summary>
      /// Update a policy
      ///
      /// Updates an existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Policy UpdatePolicy(global::Saltoapis.Nebula.Installation.V1.UpdatePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a policy
      ///
      /// Updates an existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.Policy UpdatePolicy(global::Saltoapis.Nebula.Installation.V1.UpdatePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePolicy, null, options, request);
      }
      /// <summary>
      /// Update a policy
      ///
      /// Updates an existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Policy> UpdatePolicyAsync(global::Saltoapis.Nebula.Installation.V1.UpdatePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a policy
      ///
      /// Updates an existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.Policy> UpdatePolicyAsync(global::Saltoapis.Nebula.Installation.V1.UpdatePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePolicy, null, options, request);
      }
      /// <summary>
      /// Delete a policy
      ///
      /// Permanently deletes a policy. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeletePolicy(global::Saltoapis.Nebula.Installation.V1.DeletePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a policy
      ///
      /// Permanently deletes a policy. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeletePolicy(global::Saltoapis.Nebula.Installation.V1.DeletePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePolicy, null, options, request);
      }
      /// <summary>
      /// Delete a policy
      ///
      /// Permanently deletes a policy. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeletePolicyAsync(global::Saltoapis.Nebula.Installation.V1.DeletePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a policy
      ///
      /// Permanently deletes a policy. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeletePolicyAsync(global::Saltoapis.Nebula.Installation.V1.DeletePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePolicy, null, options, request);
      }
      /// <summary>
      /// Tests permissions
      ///
      /// Returns permissions that a caller has within the installation. If the
      /// installation does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.TestPermissionsResponse TestPermissions(global::Saltoapis.Nebula.Installation.V1.TestPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tests permissions
      ///
      /// Returns permissions that a caller has within the installation. If the
      /// installation does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Saltoapis.Nebula.Installation.V1.TestPermissionsResponse TestPermissions(global::Saltoapis.Nebula.Installation.V1.TestPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestPermissions, null, options, request);
      }
      /// <summary>
      /// Tests permissions
      ///
      /// Returns permissions that a caller has within the installation. If the
      /// installation does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.TestPermissionsResponse> TestPermissionsAsync(global::Saltoapis.Nebula.Installation.V1.TestPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tests permissions
      ///
      /// Returns permissions that a caller has within the installation. If the
      /// installation does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.Installation.V1.TestPermissionsResponse> TestPermissionsAsync(global::Saltoapis.Nebula.Installation.V1.TestPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InstallationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstallationServiceClient(configuration);
      }
    }

  }
}
#endregion
