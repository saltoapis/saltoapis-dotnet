// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: salto/nebula/electronickey/v1/electronic_key.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Saltoapis.Nebula.ElectronicKey.V1 {
  /// <summary>
  /// An electronic key is battery-powered device used to interact with electronic locks.
  /// </summary>
  public static partial class ElectronicKeyService
  {
    static readonly string __ServiceName = "salto.nebula.electronickey.v1.ElectronicKeyService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.CreateElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_CreateElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.CreateElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> __Marshaller_salto_nebula_electronickey_v1_ElectronicKey = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.GetElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_GetElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.GetElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysRequest> __Marshaller_salto_nebula_electronickey_v1_ListElectronicKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysResponse> __Marshaller_salto_nebula_electronickey_v1_ListElectronicKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.UpdateElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_UpdateElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.UpdateElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.DeleteElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_DeleteElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.DeleteElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_BindElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyResponse> __Marshaller_salto_nebula_electronickey_v1_BindElectronicKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_UnbindElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyResponse> __Marshaller_salto_nebula_electronickey_v1_UnbindElectronicKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.InitializeElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_InitializeElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.InitializeElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Longrunning.V1.Operation> __Marshaller_salto_longrunning_v1_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Longrunning.V1.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.ConfigureElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_ConfigureElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.ConfigureElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.ResetElectronicKeyRequest> __Marshaller_salto_nebula_electronickey_v1_ResetElectronicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.ResetElectronicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenRequest> __Marshaller_salto_nebula_electronickey_v1_GenerateAuthorizationTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenResponse> __Marshaller_salto_nebula_electronickey_v1_GenerateAuthorizationTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateFirmwareDownloadUriRequest> __Marshaller_salto_nebula_electronickey_v1_GenerateFirmwareDownloadUriRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Saltoapis.Nebula.ElectronicKey.V1.GenerateFirmwareDownloadUriRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.CreateElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> __Method_CreateElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.CreateElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_CreateElectronicKeyRequest,
        __Marshaller_salto_nebula_electronickey_v1_ElectronicKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.GetElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> __Method_GetElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.GetElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_GetElectronicKeyRequest,
        __Marshaller_salto_nebula_electronickey_v1_ElectronicKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysRequest, global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysResponse> __Method_ListElectronicKeys = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysRequest, global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListElectronicKeys",
        __Marshaller_salto_nebula_electronickey_v1_ListElectronicKeysRequest,
        __Marshaller_salto_nebula_electronickey_v1_ListElectronicKeysResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.UpdateElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> __Method_UpdateElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.UpdateElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_UpdateElectronicKeyRequest,
        __Marshaller_salto_nebula_electronickey_v1_ElectronicKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.DeleteElectronicKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.DeleteElectronicKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_DeleteElectronicKeyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyResponse> __Method_BindElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BindElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_BindElectronicKeyRequest,
        __Marshaller_salto_nebula_electronickey_v1_BindElectronicKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyResponse> __Method_UnbindElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyRequest, global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnbindElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_UnbindElectronicKeyRequest,
        __Marshaller_salto_nebula_electronickey_v1_UnbindElectronicKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.InitializeElectronicKeyRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_InitializeElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.InitializeElectronicKeyRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_InitializeElectronicKeyRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.ConfigureElectronicKeyRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_ConfigureElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.ConfigureElectronicKeyRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigureElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_ConfigureElectronicKeyRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.ResetElectronicKeyRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_ResetElectronicKey = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.ResetElectronicKeyRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetElectronicKey",
        __Marshaller_salto_nebula_electronickey_v1_ResetElectronicKeyRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenRequest, global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenResponse> __Method_GenerateAuthorizationToken = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenRequest, global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAuthorizationToken",
        __Marshaller_salto_nebula_electronickey_v1_GenerateAuthorizationTokenRequest,
        __Marshaller_salto_nebula_electronickey_v1_GenerateAuthorizationTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateFirmwareDownloadUriRequest, global::Saltoapis.Longrunning.V1.Operation> __Method_GenerateFirmwareDownloadUri = new grpc::Method<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateFirmwareDownloadUriRequest, global::Saltoapis.Longrunning.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateFirmwareDownloadUri",
        __Marshaller_salto_nebula_electronickey_v1_GenerateFirmwareDownloadUriRequest,
        __Marshaller_salto_longrunning_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKeyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ElectronicKeyService</summary>
    public partial class ElectronicKeyServiceClient : grpc::ClientBase<ElectronicKeyServiceClient>
    {
      /// <summary>Creates a new client for ElectronicKeyService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ElectronicKeyServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ElectronicKeyService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ElectronicKeyServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ElectronicKeyServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ElectronicKeyServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new electronic key
      ///
      /// Creates a new electronic key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey CreateElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.CreateElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new electronic key
      ///
      /// Creates a new electronic key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey CreateElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.CreateElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateElectronicKey, null, options, request);
      }
      /// <summary>
      /// Create a new electronic key
      ///
      /// Creates a new electronic key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> CreateElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.CreateElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new electronic key
      ///
      /// Creates a new electronic key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> CreateElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.CreateElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateElectronicKey, null, options, request);
      }
      /// <summary>
      /// Get an electronic key
      ///
      /// Gets an existing electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey GetElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.GetElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an electronic key
      ///
      /// Gets an existing electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey GetElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.GetElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetElectronicKey, null, options, request);
      }
      /// <summary>
      /// Get an electronic key
      ///
      /// Gets an existing electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> GetElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.GetElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an electronic key
      ///
      /// Gets an existing electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> GetElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.GetElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetElectronicKey, null, options, request);
      }
      /// <summary>
      /// List electronic keys
      ///
      /// Returns a list of electronic keys that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysResponse ListElectronicKeys(global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListElectronicKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List electronic keys
      ///
      /// Returns a list of electronic keys that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysResponse ListElectronicKeys(global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListElectronicKeys, null, options, request);
      }
      /// <summary>
      /// List electronic keys
      ///
      /// Returns a list of electronic keys that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysResponse> ListElectronicKeysAsync(global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListElectronicKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List electronic keys
      ///
      /// Returns a list of electronic keys that have been previously created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysResponse> ListElectronicKeysAsync(global::Saltoapis.Nebula.ElectronicKey.V1.ListElectronicKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListElectronicKeys, null, options, request);
      }
      /// <summary>
      /// Update an electronic key
      ///
      /// Updates an existing electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey UpdateElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.UpdateElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an electronic key
      ///
      /// Updates an existing electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey UpdateElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.UpdateElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateElectronicKey, null, options, request);
      }
      /// <summary>
      /// Update an electronic key
      ///
      /// Updates an existing electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> UpdateElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.UpdateElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an electronic key
      ///
      /// Updates an existing electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.ElectronicKey> UpdateElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.UpdateElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateElectronicKey, null, options, request);
      }
      /// <summary>
      /// Delete an electronic key
      ///
      /// Permanently deletes an electronic key. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.DeleteElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an electronic key
      ///
      /// Permanently deletes an electronic key. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.DeleteElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteElectronicKey, null, options, request);
      }
      /// <summary>
      /// Delete an electronic key
      ///
      /// Permanently deletes an electronic key. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.DeleteElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an electronic key
      ///
      /// Permanently deletes an electronic key. This cannot be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.DeleteElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteElectronicKey, null, options, request);
      }
      /// <summary>
      /// Bind an electronic key
      ///
      /// Binds an electronic key. Binding an electronic key assigns a device
      /// identifier to the electronic key. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyResponse BindElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BindElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bind an electronic key
      ///
      /// Binds an electronic key. Binding an electronic key assigns a device
      /// identifier to the electronic key. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyResponse BindElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BindElectronicKey, null, options, request);
      }
      /// <summary>
      /// Bind an electronic key
      ///
      /// Binds an electronic key. Binding an electronic key assigns a device
      /// identifier to the electronic key. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyResponse> BindElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BindElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bind an electronic key
      ///
      /// Binds an electronic key. Binding an electronic key assigns a device
      /// identifier to the electronic key. After binding, the device can then be
      /// initialized or configured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyResponse> BindElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.BindElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BindElectronicKey, null, options, request);
      }
      /// <summary>
      /// Unbind an electronic key
      ///
      /// Unbinds an electronic key. Unbinding an electronic key removes the
      /// device identifier from the electronic key. This may be required in some
      /// cases where the electronic key is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyResponse UnbindElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnbindElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unbind an electronic key
      ///
      /// Unbinds an electronic key. Unbinding an electronic key removes the
      /// device identifier from the electronic key. This may be required in some
      /// cases where the electronic key is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyResponse UnbindElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnbindElectronicKey, null, options, request);
      }
      /// <summary>
      /// Unbind an electronic key
      ///
      /// Unbinds an electronic key. Unbinding an electronic key removes the
      /// device identifier from the electronic key. This may be required in some
      /// cases where the electronic key is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyResponse> UnbindElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnbindElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unbind an electronic key
      ///
      /// Unbinds an electronic key. Unbinding an electronic key removes the
      /// device identifier from the electronic key. This may be required in some
      /// cases where the electronic key is not available anymore because, for
      /// example, it's broken or damaged. Unbinding allows the initialization of
      /// the replacement device without removing it from the installation. It also
      /// means the device keeps all the information associated with it, such as
      /// events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyResponse> UnbindElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.UnbindElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnbindElectronicKey, null, options, request);
      }
      /// <summary>
      /// Initialize an electronic key
      ///
      /// Initializes an electronic key. Electronic keys need to be initialized
      /// before you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation InitializeElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.InitializeElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initialize an electronic key
      ///
      /// Initializes an electronic key. Electronic keys need to be initialized
      /// before you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation InitializeElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.InitializeElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeElectronicKey, null, options, request);
      }
      /// <summary>
      /// Initialize an electronic key
      ///
      /// Initializes an electronic key. Electronic keys need to be initialized
      /// before you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> InitializeElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.InitializeElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initialize an electronic key
      ///
      /// Initializes an electronic key. Electronic keys need to be initialized
      /// before you can start to use them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> InitializeElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.InitializeElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeElectronicKey, null, options, request);
      }
      /// <summary>
      /// Configure an electronic key
      ///
      /// Configures an electronic key. Configuring an electronic key implies
      /// adding some information to the electronic key such as setting the time
      /// zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ConfigureElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.ConfigureElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configure an electronic key
      ///
      /// Configures an electronic key. Configuring an electronic key implies
      /// adding some information to the electronic key such as setting the time
      /// zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ConfigureElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.ConfigureElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigureElectronicKey, null, options, request);
      }
      /// <summary>
      /// Configure an electronic key
      ///
      /// Configures an electronic key. Configuring an electronic key implies
      /// adding some information to the electronic key such as setting the time
      /// zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ConfigureElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.ConfigureElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configure an electronic key
      ///
      /// Configures an electronic key. Configuring an electronic key implies
      /// adding some information to the electronic key such as setting the time
      /// zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ConfigureElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.ConfigureElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigureElectronicKey, null, options, request);
      }
      /// <summary>
      /// Reset an electronic key
      ///
      /// Resetting a device such as an electronic key means returning it to its
      /// factory settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ResetElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.ResetElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetElectronicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reset an electronic key
      ///
      /// Resetting a device such as an electronic key means returning it to its
      /// factory settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation ResetElectronicKey(global::Saltoapis.Nebula.ElectronicKey.V1.ResetElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetElectronicKey, null, options, request);
      }
      /// <summary>
      /// Reset an electronic key
      ///
      /// Resetting a device such as an electronic key means returning it to its
      /// factory settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ResetElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.ResetElectronicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetElectronicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reset an electronic key
      ///
      /// Resetting a device such as an electronic key means returning it to its
      /// factory settings. Resetting is the process of removing the identity as
      /// well as all the associated information of an already configured device.
      /// Once a device has been reset, you need to reconfigure it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> ResetElectronicKeyAsync(global::Saltoapis.Nebula.ElectronicKey.V1.ResetElectronicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetElectronicKey, null, options, request);
      }
      /// <summary>
      /// Generate authorization token for an electronic key
      ///
      /// Generates an authorization token that allows to connect to, authenticate and
      /// authorize an electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenResponse GenerateAuthorizationToken(global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAuthorizationToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate authorization token for an electronic key
      ///
      /// Generates an authorization token that allows to connect to, authenticate and
      /// authorize an electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenResponse GenerateAuthorizationToken(global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAuthorizationToken, null, options, request);
      }
      /// <summary>
      /// Generate authorization token for an electronic key
      ///
      /// Generates an authorization token that allows to connect to, authenticate and
      /// authorize an electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenResponse> GenerateAuthorizationTokenAsync(global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAuthorizationTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate authorization token for an electronic key
      ///
      /// Generates an authorization token that allows to connect to, authenticate and
      /// authorize an electronic key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenResponse> GenerateAuthorizationTokenAsync(global::Saltoapis.Nebula.ElectronicKey.V1.GenerateAuthorizationTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAuthorizationToken, null, options, request);
      }
      /// <summary>
      /// Generate electronic key firmware download URI
      ///
      /// Provides the download URI for the latest firmware bundle for the
      /// electronic key. The returned URI can be used to bring the electronic key
      /// firmwares up to latest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation GenerateFirmwareDownloadUri(global::Saltoapis.Nebula.ElectronicKey.V1.GenerateFirmwareDownloadUriRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateFirmwareDownloadUri(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate electronic key firmware download URI
      ///
      /// Provides the download URI for the latest firmware bundle for the
      /// electronic key. The returned URI can be used to bring the electronic key
      /// firmwares up to latest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Saltoapis.Longrunning.V1.Operation GenerateFirmwareDownloadUri(global::Saltoapis.Nebula.ElectronicKey.V1.GenerateFirmwareDownloadUriRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateFirmwareDownloadUri, null, options, request);
      }
      /// <summary>
      /// Generate electronic key firmware download URI
      ///
      /// Provides the download URI for the latest firmware bundle for the
      /// electronic key. The returned URI can be used to bring the electronic key
      /// firmwares up to latest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> GenerateFirmwareDownloadUriAsync(global::Saltoapis.Nebula.ElectronicKey.V1.GenerateFirmwareDownloadUriRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateFirmwareDownloadUriAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate electronic key firmware download URI
      ///
      /// Provides the download URI for the latest firmware bundle for the
      /// electronic key. The returned URI can be used to bring the electronic key
      /// firmwares up to latest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Saltoapis.Longrunning.V1.Operation> GenerateFirmwareDownloadUriAsync(global::Saltoapis.Nebula.ElectronicKey.V1.GenerateFirmwareDownloadUriRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateFirmwareDownloadUri, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ElectronicKeyServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ElectronicKeyServiceClient(configuration);
      }
    }

  }
}
#endregion
